searchState.loadedDescShard("kiteconnect_async_wasm", 0, "kiteconnect-async-wasm v1.0.3\nKiteConnect API Client Module\nKiteConnect v1.0.3 Data Models\nConfiguration for response caching\nMain client for interacting with the KiteConnect API\nConfiguration for KiteConnect client\nConfiguration for retry behavior\nGets the access token for this instance\nAuthentication Module\nCheck if a request can be made without waiting\nCancel a mutual fund order\nCancel a mutual fund SIP\nCancel an order\nModify an open position product type\nConvert positions between product types (typed)\nDelete a GTT order\nEndpoint Management Module\nExit a BO/CO order\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates an access token using the request token from …\nGenerates session with typed response\nGet the delay required before making a request\nGet all GTT orders or details of a specific GTT\nGTT (Good Till Triggered) Module\nRetrieves historical candlestick data for an instrument\nRetrieve historical data with automatic chunking for large …\nGet historical data with typed response\nRetrieves the user’s holdings (stocks held in demat …\nGet user holdings with typed response\nGet instruments list\nRetrieve margin requirements for specific trading segments\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates the access token\nInvalidates access token with typed response\nInvalidates the refresh token\nCheck if rate limiting is enabled\nGenerates the KiteConnect login URL for user authentication\nRetrieve Last Traded Price (LTP) for instruments\nGet Last Traded Price (LTP) with typed response\nRetrieves account balance and margin details\nGet user margins with typed response\nMarket Data Module\nGet mutual fund holdings\nGet mutual fund holdings with typed response\nGet mutual fund instruments list\nGet single mutual fund order with typed response\nGet all mutual fund orders or individual order info\nGet mutual fund orders with typed response\nGet single mutual fund SIP with typed response\nGet mutual fund SIPs (Systematic Investment Plans)\nGet mutual fund SIPs with typed response\nModify a GTT order\nModify a mutual fund SIP\nModify an open order\nMutual Funds Module\nCreates a new KiteConnect client instance\nCreates a new KiteConnect client with custom configuration\nRetrieve OHLC (Open, High, Low, Close) data for instruments\nGet OHLC data with typed response\nGet the list of order history\nGet all trades for a specific order\nGet trades for specific order with typed response\nOrders Module\nRetrieves a list of all orders for the current trading day\nGet all orders with typed response\nPlace a GTT order\nPlace a mutual fund order\nPlace a mutual fund order with typed response\nPlace a mutual fund SIP (Systematic Investment Plan)\nPlace a mutual fund SIP with typed response\nPlace an order\nPlace an order with typed response\nPortfolio Module\nRetrieves the user’s positions (open positions for the …\nGet user positions with typed response\nGet user profile details\nGet user profile with typed response\nRetrieve quote and market depth for list of instruments\nGet real-time quotes with typed response\nRate Limiter Module\nGet rate limiter statistics for monitoring\nRequest for new access token\nGets the current request count for monitoring\nGets the current session expiry hook\nSets the access token for authenticated API requests\nEnable or disable rate limiting\nSets a session expiry callback hook for this instance\nGet all trades\nGet all trades with typed response\nGet the trigger range for a list of instruments\nUtility Functions\nWait for rate limit compliance before making a request\nCancel GTT\nCancel MF order\nCancel order\nCancel SIP\nConvert position\nHTTP DELETE method for resource deletion\nEndpoint configuration containing method, path, and rate …\nHTTP GET method for data retrieval\nGet GTT info\nGet GTTs\nGenerate session from request token\nHistorical candle endpoints: 3 requests/second\nGet historical data\nGet holdings\nHTTP method types for API requests\nGet instruments list\nInvalidate refresh token\nInvalidate session\nComprehensive enum of all KiteConnect API endpoints\nGet Last Traded Price\nGenerate login URL\nGet MF holdings\nGet MF instruments\nGet MF order info\nGet MF orders\nGet user margins\nGet segment-specific margins\nGet market margins\nModify GTT\nModify order\nModify SIP\nGet OHLC data\nGet order history\nGet order trades\nOrder placement endpoints: 10 requests/second\nGet all orders\nHTTP POST method for resource creation\nHTTP PUT method for resource updates\nPlace GTT\nPlace MF order\nPlace order\nPlace SIP\nGet positions\nGet user profile\nQuote endpoints: 1 request/second\nGet real-time quotes\nRate limit categories based on official KiteConnect API …\nRenew access token\nGet SIP info\nGet SIPs\nAll other endpoints: 10 requests/second\nGet trades\nGet trigger range\nConvert HTTP method to string for use with reqwest\nBuild the full URL path with dynamic segments\nGet all endpoints in a specific rate limit category\nGet endpoint configuration for this endpoint\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the HTTP method for this endpoint\nHTTP method for this endpoint\nGet the minimum delay between requests for this category\nCreate a new endpoint configuration\nGet the base path for this endpoint\nURL path for this endpoint (without parameters)\nGet the rate limit category for this endpoint\nRate limit category for this endpoint\nGet the rate limit for this category (requests per second)\nCheck if this endpoint requires authentication\nWhether this endpoint requires authentication\nStatistics for a specific rate limit category\nRate limiter for KiteConnect API endpoints\nStatistics about rate limiter state\nCheck if a request can be made without waiting\nPer-category statistics\nWhether rate limiting is enabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the delay required before making a request\nGet rate limiter statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this category is currently at its rate limit\nCheck if rate limiting is enabled\nWhen the last request was made\nCreate a new rate limiter\nWhen the next request can be made\nGet remaining capacity for this category\nCurrent request count in this second\nMaximum requests per second for this category\nEnable or disable rate limiting\nWait for rate limit compliance before making a request\nAsync trait for handling HTTP requests across different …\nBase URL for KiteConnect API in production\nSend an HTTP request with the specified parameters\nAuthentication and user-related data models.\nCommon types and utilities shared across all KiteConnect …\nGTT (Good Till Triggered) module for KiteConnect API v1.0.0\nMarket Data module for KiteConnect API v1.0.0\nMutual Funds module for KiteConnect API v1.0.0\nOrders module for KiteConnect API v1.0.0\nPortfolio module for KiteConnect API v1.0.0\nPrelude module for convenient imports\nMargin data structures for account balance and trading …\nSession management data structures for KiteConnect …\nUser profile and account information data structures.\nFund transaction details\nComplete margin data from the <code>margins</code> API\nAvailable margin funds breakdown\nMargin utilisation breakdown\nMargin data for a specific trading segment\nTrading segments for margin segregation\nAdditional margin from holdings/collateral\nAmount\nAvailable cash margin\nCalculate actual net margin (available total - utilised …\nCheck if margin is sufficient for a trade\nAvailable cash in the account\nGet cash-only balance (excluding collateral/margins)\nCollateral margin from pledged securities\nCommodity segment margins\nTransaction date\nDebits from trades and charges\nDescription/narration\nEquity segment margins\nExposure margin utilised\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet margin for a specific segment\nCheck if sufficient funds are available\nCheck if any segment has sufficient margin\nCheck if account has unrealised losses\nHolding sales proceeds\nTransaction ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIntraday payin\nLiquid collateral utilised\nLive balance (real-time)\nM2M realised P&amp;L\nM2M (Mark to Market) unrealised P&amp;L\nNet available margin (available - utilised)\nOpening balance\nOption premium\nPayout amount (funds on hold)\nSegment where transaction occurred\nSPAN margin utilised\nStock collateral utilised\nCalculate total available margin\nCalculate total utilised margin\nGet total available cash across all segments\nGet combined net margin across segments\nGet total P&amp;L (realised + unrealised)\nTransaction type (credit/debit)\n<code>ToString::to_string</code>, but without panic on OOM.\nTurnover charges\nGet margin utilisation percentage\nUtilised margin amounts\nLogin URL configuration for OAuth flow\nToken invalidation response\nRequest token from OAuth callback\nResponse from the <code>generate_session</code> API call\nAdditional session metadata\nThe authentication token that’s used with every …\nAction parameter\nThe API key for which the authentication was performed\nAPI key\nFull URL to the user’s avatar (PNG image) if there’s …\nBase login URL\nThe broker ID\nGenerate the complete login URL\nDemat consent status\nUser’s email\nExchanges enabled for trading on the user’s account\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if the user has access to a specific exchange\nCheck if the user has access to a specific order type\nCheck if the user has access to a specific product\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the session has required authentication data\nValidate request token format\nUser’s last login time\nResponse message\nSession metadata containing demat_consent and other user …\nCreate new login URL configuration\nCreate new request token\nOrder types enabled for the user\nMargin product types enabled for the user\nA token for public session validation where requests may …\nRedirect URL after login\nA token for getting long standing read permissions. This …\nRequest token received from callback\nState parameter for CSRF protection\nState parameter (for CSRF validation)\nStatus parameter\nSuccess status\nGet the access token for API requests\nThe unique, permanent user id registered with the broker …\nUser’s real name\nShortened version of the user’s real name\nUser’s registered role at the broker. This will be …\nSet redirect URL\nSet state parameter\nAccount status information\nAdditional user metadata\nUser profile information from the <code>profile</code> API\nUser type enumeration for type-safe handling\nAccount is active\nAvatar URL\nBroker identifier\nCheck if account can place trades\nAccount creation date\nDemat consent status\nGet display name (prefer user_name, fallback to …\nEmail address\nList of enabled exchanges\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if user has access to a specific exchange\nCheck if user has access to a specific order type\nCheck if user has access to a specific product\nCheck if account has any restrictions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if user type is business-related\nCheck if profile has essential information\nCheck if user type is individual\nCheck if KYC is complete\nKYC status\nLast login timestamp\nUser metadata\nList of enabled order types\nList of enabled products\nAccount restrictions (if any)\nCheck if user type supports specific features\nTrading is enabled\n<code>ToString::to_string</code>, but without panic on OOM.\nUser ID\nUser name/display name\nUser short name\nUser type (“individual”, “corporate”, etc.)\nShared enums and constants used across all KiteConnect …\nCustom error types for KiteConnect operations using …\nResponse wrapper types for KiteConnect API responses.\nStock exchanges supported by KiteConnect.\nGTT (Good Till Triggered) order status enum.\nInstrument types and market segments.\nInterval types for historical market data with dual …\nTrading products and order-related enums.\nBSE Futures &amp; Options (BFO)\nBombay Stock Exchange (BSE)\nCurrency Derivatives Segment (CDS)\nStock exchanges supported by KiteConnect\nGlobal/International markets\nMulti Commodity Exchange (MCX)\nNational Commodity &amp; Derivatives Exchange (NCDEX)\nNSE Futures &amp; Options (NFO)\nNational Stock Exchange of India (NSE)\nNSE Indices Exchange (NSEIX)\nGet all supported exchanges\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if exchange supports commodity trading\nCheck if exchange supports derivatives trading\nCheck if exchange supports equity trading\nCheck if exchange is international/global\n<code>ToString::to_string</code>, but without panic on OOM.\nGTT order status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nInstrument types\nInstrument segments (exchange + type combinations)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nDaily interval (1 day candles)\n15-minute interval\n5-minute interval\nInterval types for historical data with dual serialization …\n1-minute interval (highest resolution)\n60-minute (1-hour) interval\n10-minute interval\n30-minute interval\n3-minute interval\nAll available intervals\nGet the integer representation of the interval\nReturns the argument unchanged.\nCreate an interval from its integer representation\nCalls <code>U::from(self)</code>.\nCheck if a date range is within the allowed limits for …\nGet the maximum number of days allowed for historical data …\nCalculate the maximum allowed “to” date given a “from…\n<code>ToString::to_string</code>, but without panic on OOM.\nOrder types\nProduct types for orders\nTransaction types\nOrder validity types\nOrder varieties\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nGeneric API error when error_type is not recognized\nAuthentication failed (generic)\nCSV parsing failed (for instruments data)\nInternal system error - API unable to understand OMS …\nDate/time parsing failed\nContains the error value\nGeneral error with custom message\nUnclassified error (should be rare)\nInsufficient holdings available to place sell order\nHTTP request failed\nMissing required fields, bad parameter values\nInvalid parameter provided (generic)\nJSON parsing failed\nMain error type for all KiteConnect operations\nResult type alias for KiteConnect operations\nBackward compatibility with anyhow errors\nInsufficient funds required for order placement\nNetwork error - API unable to communicate with OMS\nContains the success value\nOrder related errors (placement failures, corrupt fetch, …\nSession expired or invalidated (403 header) User should …\nURL parsing failed\nUser account related errors\nCreate a new API error (legacy method for backward …\nCreate a new API error with error type (legacy method for …\nCreate a new authentication error\nCreate a new DataException\nReturns the argument unchanged.\nCreate a new API error from response Maps official …\nCreate a new general error\nCreate a new GeneralException\nCreate a new HoldingException\nCreate a new InputException\nCalls <code>U::from(self)</code>.\nCreate a new invalid parameter error\nCheck if this is a client-side error (4xx)\nCheck if this error can be retried\nCheck if this is a server-side error (5xx)\nCreate a new MarginException\nCreate a new NetworkException\nCreate a new OrderException\nCheck if this error requires re-authentication\nCreate a new TokenException\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate a new UserException\nStandard KiteConnect API response wrapper\nRaw response for backward compatibility and debugging\nStatus enum for type-safe status handling\nResponse data (None for error responses)\nRaw JSON data\nCreate a new error response\nError type (for error responses)\nError type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the data or return an error\nCheck if the response is an error\nCheck if the response is successful\nResponse message\nResponse message\nResponse status (“success” or “error”)\nResponse status\nCreate a new success response\nBracket GTT builder (combines stop-loss and target)\nGTT builder for creating complete GTT triggers with orders\nGTT condition builder\nGTT order builder for creating complex GTT orders\nGTT template for common patterns\nStop-loss GTT builder\nTarget GTT builder\nAdd an order\nCreate a bracket (OCO) template\nBuild the GTT order parameters\nBuild the GTT create parameters\nBuild the GTT condition\nBuild target GTT\nBuild bracket GTT (OCO - One Cancels Other)\nBuild stop-loss GTT with limit order\nBuild stop-loss GTT with market order\nSet condition\nSet current market price\nSet current market price\nSet current market price\nTemplate description\nSet exchange\nSet exchange\nSet exchange\nSet exchange\nSet exchange\nSet expiry time\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet GTT type\nGTT type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet last price\nSet limit price (for SL-L orders)\nTemplate name\nCreate a new GTT order builder\nCreate a new GTT builder\nCreate a new GTT condition builder\nCreate a new stop-loss GTT builder\nCreate a new target GTT builder\nCreate a new bracket GTT builder\nSet order type\nSet orders\nSet price\nSet product type\nSet product type\nSet product type\nSet product type\nSet quantity\nSet quantity\nSet quantity\nSet quantity\nSet stop-loss price\nCreate a stop-loss template\nSet target price\nSet target price\nCreate a target template\nTemplate parameters\nSet trading symbol\nSet trading symbol\nSet trading symbol\nSet trading symbol\nSet trading symbol\nSet transaction type\nSet transaction type (usually SELL for long positions, BUY …\nSet transaction type (usually SELL for long positions, BUY …\nSet transaction type (usually SELL for long positions, BUY …\nSet trigger price (stop-loss level)\nAdd a trigger value\nSet multiple trigger values\nGTT data structure\nGTT trigger condition\nGTT creation parameters\nGTT modification parameters\nGTT order parameters for execution when triggered\nGTT order execution result\nGTT response\nGTT trigger type enumeration\nGTTs collection\nSingle trigger (one-time)\nTwo-leg trigger (OCO - One Cancels Other)\nGet active GTTs\nCondition\nCondition\nNew condition\nCreated timestamp\nExchange\nExchange\nGet expired GTTs\nSet expiry time\nExpires at (optional expiry)\nExpiry time (optional)\nNew expiry time\nGet GTTs expiring soon\nGet failed orders with rejection reasons\nFind GTT by ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGTT ID\nGTT type\nGTT type\nGet GTTs for a specific symbol\nCheck if any orders were successfully placed\nCheck if GTT has expired based on expiry time\nGTT ID\nGTT ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if GTT is active\nCheck if GTT is cancelled\nCheck if GTT is disabled\nCheck if GTT is expired\nCheck if GTT is rejected\nCheck if this is a single trigger GTT\nCheck if GTT is triggered\nCheck if this is a two-leg (OCO) GTT\nLast price (when condition was created)\nMetadata\nGet the number of orders to be executed\nOrder ID\nOrder type\nOrders to be placed when triggered\nOrders to execute when triggered\nNew orders\nParent trigger (if this is part of a multi-leg GTT)\nPrice (for limit orders)\nProduct type\nQuantity\nRejection reason (if order was rejected)\nResult (order ID when triggered, if successful)\nCreate a single trigger GTT\nGTT status\nGet successful order IDs\nGet time remaining until expiry\nTrading symbol\nTrading symbol\nTransaction type\nGet all trigger values\nTrigger values (price levels)\nGet triggered GTTs\nList of GTTs\nCreate a two-leg (OCO) GTT\nUpdated timestamp\nUser ID\nValidate GTT parameters\nCheck if current price would trigger the GTT\nHistorical market data types and request structures.\nHistorical candle data point\nHistorical data response\nHistorical data request parameters (v1.0.3 enhanced)\nHistorical data metadata\nList of candles\nClosing price for the interval\nEnable continuous data for futures\nContinuous data flag (for futures)\nTotal candles count\nTimestamp in UTC\nGet the number of days in this request\nConvenience method for fetching data with default error …\nCreate a helper for fetching data with automatic chunking\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom date and time (IST)\nHighest price during the interval\nInstrument token - unique identifier for the trading …\nInstrument token\nTime interval for the historical data\nInterval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this request is within API limits\nLowest price during the interval\nMetadata\nCreate a new historical data request\nCreate a new historical data request with automatic …\nOpen interest data flag (for derivatives)\nOpen interest (for derivatives only)\nOpening price for the interval\nSplit a large date range into multiple smaller requests …\nSplit a large date range into multiple smaller requests in …\nTrading symbol\nTo date and time (IST)\nValidate the date range against API limits for the …\nVolume traded during the interval\nInclude open interest data\nMarket break/lunch time\nMarket is closed\nHoliday\nInstrument data structure\nInstrument lookup by token\nInstrument search parameters\nMarket state enumeration\nMarket status information\nMarket is open for trading\nPost-market session\nPre-market session\nAdd a token to lookup\nAdd multiple tokens to lookup\nGet days to expiry (None for non-expiring instruments)\nSearch for equity instruments only\nSet the exchange filter\nSet the exchange for validation\nExchange\nExchange\nExchange to search in (optional)\nExchange (optional, for validation)\nExchange token\nCheck if the instrument expires today\nExpiry date (for derivatives, None for equity)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSearch for futures only\nInstrument token (unique identifier)\nSet the instrument type filter\nInstrument type\nInstrument type filter (optional)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate intrinsic value (for options)\nCheck if the instrument is at-the-money (for options)\nCheck if the market is in break\nCheck if the instrument is a call option\nCheck if the market is closed\nCheck if the instrument is an equity\nCheck if the instrument has expired\nCheck if the instrument is a future\nCheck if it’s a holiday\nCheck if the instrument is in-the-money (for options)\nCheck if the market is currently open\nCheck if the instrument is an option\nCheck if the instrument is out-of-the-money (for options)\nCheck if it’s post-market session\nCheck if it’s pre-market session\nCheck if the instrument is a put option\nCheck if any trading is allowed (including pre/post market)\nLast price\nSet the result limit\nMaximum number of results\nLot size (minimum quantity for trading)\nMarket close time\nMarket open time\nCompany name or instrument name\nCreate a new instrument search\nCreate a new instrument lookup\nSearch for options only\nPost-market close time\nPost-market open time\nPre-market close time\nPre-market open time\nSearch query string\nSegment\nMarket status\nStrike price (for options, 0.0 for others)\nTick size (minimum price movement)\nCalculate the tick value in rupees\nList of instrument tokens to lookup\nTrading symbol\nIndividual depth level (price level in the order book)\nLevel 2 market data (best bid/ask)\nMarket depth represents the order book with buy and sell …\nBest ask price\nBest ask quantity\nGet the best ask (lowest sell price)\nGet the best bid (highest buy price)\nBest bid price\nBest bid quantity\nBuy orders (bids)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the mid price (average of best bid and ask)\nGet the mid price\nNumber of orders at this price level\nPrice level\nTotal quantity at this price level\nSell orders (asks)\nGet the spread between best bid and ask\nGet the spread\nGet the spread percentage\nTimestamp of the data\nGet total ask volume\nGet total bid volume\nIndividual depth item (bid/ask)\nHistorical quote data point\nLTP (Last Traded Price) data - lightweight quote\nMarket depth (order book)\nOHLC (Open, High, Low, Close) data\nOHLCV (Open, High, Low, Close, Volume) data\nReal-time quote data\nQuote request for multiple instruments\nAdd an instrument by trading symbol\nAdd an instrument by token\nGet the current ask price (lowest sell price)\nAverage traded price\nGet the best ask (lowest sell price)\nGet the best bid (highest buy price)\nGet the current bid price (highest buy price)\nGet the body size (close - open)\nBuy orders (bids)\nBuy quantity\nGet the percentage change from previous close\nClosing price (previous day’s close)\nClosing price\nGet the day’s range (high - low)\nGet the day’s range percentage\nMarket depth\nSet the exchange for validation\nExchange\nExchange (optional for validation)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHighest price of the day\nHighest price\nInstrument token\nInstrument token\nList of instrument tokens or trading symbols\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the current price is at day high\nCheck if the current price is at day low\nCheck if it’s a bearish candle\nCheck if it’s a bullish candle\nCheck if it’s a doji candle (open ≈ close)\nCheck if the stock is trading lower than previous close\nCheck if it was a flat day (close == open)\nCheck if it was a negative day (close &lt; open)\nCheck if it was a positive day (close &gt; open)\nCheck if the stock is unchanged from previous close\nCheck if the stock is trading higher than previous close\nLast traded price\nLast traded price\nLast traded quantity\nLast traded time\nLowest price of the day\nLowest price\nGet the lower shadow size\nGet the midpoint price\nNet change from previous close\nCreate a new quote request\nOHLC data\nOHLCV data\nOpen interest (for derivatives)\nOpen interest day change\nOpen interest day low\nOpening price\nOpening price\nOpen interest (for derivatives)\nGet the order flow ratio (bid quantity / ask quantity)\nNumber of orders\nGet position within the day’s range (0.0 = at low, 1.0 = …\nPrice\nQuantity\nGet the trading range (high - low)\nGet the range percentage relative to close\nSell orders (asks)\nSell quantity\nGet the bid-ask spread\nGet the bid-ask spread percentage\nTimestamp\nGet the total number of ask orders\nGet the total ask quantity (sum of all ask quantities)\nGet the total ask volume\nGet the total number of bid orders\nGet the total bid quantity (sum of all bid quantities)\nGet the total bid volume\nTrading symbol\nGet the typical price (HLC/3)\nGet the upper shadow size\nVolume traded\nVolume traded\nGet the volume-weighted average price (VWAP) - simplified …\nGet the weighted close (HLCC/4)\nMF holding data structure\nMF holdings collection\nMF portfolio summary\nCalculate absolute P&amp;L\nGet absolute P&amp;L\nGet available quantity (non-pledged)\nAverage price (average NAV at which units were purchased)\nCalculate current value of the holding\nFind holding by folio number\nFind holding by trading symbol\nFolio number\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFund name\nList of MF holdings\nGet holdings by fund name pattern\nNumber of holdings\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate investment value (cost)\nCheck if the holding is in loss\nCheck if the overall portfolio is in loss\nCheck if any units are pledged\nCheck if the holding is profitable\nCheck if the overall portfolio is profitable\nCheck if this is a small holding (less than specified …\nGet largest holdings by current value\nLast price (current NAV)\nLast price date\nGet loss-making holdings\nNumber of loss-making holdings\nGet the loss rate (percentage of loss-making holdings)\nGet the day’s change in NAV\nGet the day’s change in NAV percentage\nPledged quantity\nP&amp;L (profit and loss)\nCalculate P&amp;L percentage\nCalculate portfolio summary\nGet profitable holdings\nNumber of profitable holdings\nQuantity (units held)\nCalculate redemption value for specified units\nGet small holdings below threshold\nGet top performers by P&amp;L percentage\nGet total available value (non-pledged)\nTotal current value\nTotal investment value\nGet total pledged value\nTotal P&amp;L\nTotal P&amp;L percentage\nTrading symbol\nGet holding weight in portfolio (requires portfolio value)\nGet the win rate (percentage of profitable holdings)\nGet worst performers by P&amp;L percentage\nMutual Fund instrument data\nMF instrument search parameters\nMF fund performance data\nCheck if fund allows SIP\nFilter by AMC\nAMC (Asset Management Company) code\nAMC filter\nGet the best performing period return\nSearch for debt funds only\nDividend reinvestment flag\nSearch for equity funds only\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFilter by fund type\nFund type (growth, dividend, etc.)\nFund type filter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if fund is consistently performing (positive returns …\nCheck if this is a debt fund\nCheck if this is a dividend plan\nCheck if this is an equity fund\nCheck if this is a growth plan\nCheck if this is a hybrid fund\nCheck if amount is valid for purchase\nLast price (NAV)\nLast price date\nLimit results\nLimit results\nMinimum additional purchase amount\nMinimum purchase amount\nMinimum redemption quantity\nFund name\nFund name\nCurrent NAV\nNAV date\nCreate a new search\nGet next valid purchase amount\nFilter by plan\nFund category (equity, debt, hybrid, etc.)\nPlan filter (growth, dividend)\nPurchase amount multiple\nSearch query (fund name or AMC)\nRedemption quantity multiple\n1 day return\n1 month return\n1 week return\n1 year return\n3 months return\n3 years return\n5 years return\n6 months return\nSince inception return\nScheme type (open-ended, close-ended)\nGet the settlement days\nSettlement type (T+1, T+3, etc.)\nTrading symbol (unique identifier)\nTrading symbol\nGet volatility indicator based on return spread\nGet the worst performing period return\nOrder is cancelled\nOrder placed and pending\nMF order data structure\nMF order placement parameters\nMF order response\nMF order status enumeration\nMF orders list\nOrder is rejected\nAmount (for purchases)\nAmount (for purchases)\nAverage price (NAV at which units were allotted/redeemed)\nGet cancelled orders\nGet completed orders\nExchange order ID\nExchange timestamp\nFind order by ID\nFolio number\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFund name\nCheck if order has folio number assigned\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the investment amount (for completed orders)\nCheck if order is cancelled\nCheck if order is completed\nCheck if this is a purchase order\nCheck if this is a redemption order\nCheck if order is rejected\nOrder ID\nOrder ID\nOrder timestamp\nGet order value (amount for purchases, NAV*quantity for …\nList of MF orders\nGet orders by status\nGet orders for a specific fund\nPlaced by user ID\nCreate a purchase order\nGet purchase orders\nPurchase type (FRESH/ADDITIONAL)\nQuantity (for redemptions)\nQuantity (for redemptions)\nCreate a redemption order\nGet redemption orders\nGet rejected orders\nSettlement ID\nOrder status\nStatus message\nTag\nTag\nCalculate total invested amount (completed purchase orders)\nCalculate total redeemed amount (completed redemption …\nTrading symbol\nTrading symbol\nTransaction type (BUY/SELL)\nTransaction type\nGet the units allotted/redeemed\nValidate the order parameters\nAdd a tag to the order\nSIP is active\nSIP is cancelled\nSIP is completed\nDaily SIP\nMonthly SIP\nSIP is paused\nQuarterly SIP\nSIP (Systematic Investment Plan) data structure\nSIP frequency enumeration\nSIP modification parameters\nSIP creation parameters\nSIP response\nSIP status enumeration\nSIP step-up configuration\nSIPs collection\nWeekly SIP\nGet active SIPs\nStep-up amount\nInstallment amount\nNew installment amount\nGet annual investment amount\nInstallments completed\nCreated timestamp\nCreate daily SIP\nDividend type\nFind SIP by ID\nFrequency (monthly, weekly, daily)\nStep-up frequency (yearly, half-yearly)\nFrequency\nNew frequency\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFund name\nCheck if step-up is configured\nSet initial amount\nInitial amount (for first installment, optional)\nInstallment amount\nSet number of installments\nNumber of installments (optional for perpetual SIP)\nNew number of installments\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if SIP is active\nCheck if SIP is cancelled\nCheck if SIP is completed\nCheck if next installment is due soon (within days)\nCheck if SIP is paused\nCheck if this is a perpetual SIP (no end date)\nLast installment date\nCreate monthly SIP\nGet monthly equivalent amount (for comparison across …\nCreate a new SIP\nNext installment date\nNext step-up date\nGet paused SIPs\nPending installments\nCalculate progress percentage\nGet remaining amount to be invested\nSIP ID\nSIP ID\nSIP ID\nList of SIPs\nGet SIPs due soon\nGet SIPs for a specific fund\nSIP status\nSIP status (to pause/resume)\nStep up configuration (if any)\nSet tag\nTag\nTag\nCalculate total annual commitment\nGet total installments (completed + pending)\nCalculate total invested amount\nCalculate total monthly commitment\nTrading symbol\nTrading symbol\nSIP trigger price (if any)\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate SIP parameters\nCreate weekly SIP\nAMO (After Market Order) placed\nBracket order response\nOrder cancellation is pending\nOrder is cancelled\nOrder sent to exchange and confirmed\nCover order response\nModification pending\nOrder modification validation passed\nOrder is in the system but not yet sent to exchange\nOrder data structure as returned by KiteConnect API\nOrder cancellation response\nOrder meta information\nOrder modification data\nOrder status enumeration\nOrder placed successfully\nOrder is rejected by system or exchange\nOrder trigger is pending\nOrder validation passed\nAccount ID\nAverage price at which the order was executed\nCancelled quantity\nChild order details (if any)\nDemat consent\nDisclosed quantity\nNew disclosed quantity\nExchange\nExchange order ID\nExchange timestamp\nExchange update timestamp\nGet fill percentage\nFilled quantity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGUID for idempotency\nICEBERG leg count\nICEBERG quantity\nInstrument token\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the status indicates the order is still active\nCheck if order is cancelled\nCheck if order is completed\nCheck if the status indicates the order is final (no more …\nCheck if order is open (pending)\nCheck if order is partially filled\nCheck if order is rejected\nMarket protection percentage\nMeta information\nOrder ID assigned by the system\nOrder ID to modify\nOrder ID that was cancelled\nParent order details\nOrder ID\nOrder timestamp\nOrder type\nNew order type\nParent order ID for bracket/cover orders\nPending quantity\nPrice\nNew price\nProduct type\nQuantity\nNew quantity\nGet remaining quantity\nOrder status\nStatus message from exchange\nStatus message from OMS\nTag for the order\nTrading symbol\nTransaction type (BUY/SELL)\nTrigger price for SL orders\nNew trigger price\nValidity\nNew validity\nOrder book (list of all orders)\nOrder history container\nOrder history entry\nOrder placement response\nTrade data structure\nTrade book (list of all trades)\nTrade history container\nAccount ID\nCalculate average price across all trades\nAverage price at which the trade was executed\nAverage price\nGet buy trades\nGet cancelled orders\nCancelled quantity\nGet completed orders\nDisclosed quantity\nList of order history entries\nExchange\nExchange\nExchange order ID\nExchange order ID\nExchange timestamp\nExchange timestamp\nExchange update timestamp\nFill timestamp\nFilled quantity\nFind order by ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGroup trades by trading symbol\nGUID\nInstrument token\nInstrument token\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is a buy trade\nCheck if this is a sell trade\nGet the latest status of the order\nMarket protection\nGet open orders\nOrder ID\nOrder ID\nOrder ID assigned by the system\nOrder timestamp\nOrder type\nList of orders\nGet orders by status\nGet orders by trading symbol\nParent order ID\nPending quantity\nPrice\nProduct type\nProduct\nQuantity traded\nQuantity\nGet rejected orders\nGet sell trades\nOrder status\nStatus message\nRaw status message from exchange\nGet all status transitions\nTag\nGet total filled quantity across all fills\nCalculate total quantity traded\nCalculate total quantity traded\nCalculate the total value of the trade\nCalculate total traded value\nCalculate total traded value\nTrade ID\nList of trades\nList of trades\nGet trades by trading symbol\nGet trades by transaction type\nGet trades by transaction type\nTrading symbol\nTrading symbol\nTransaction type (BUY/SELL)\nTransaction type\nTrigger price\nValidity\nVariety (regular, bo, co, amo)\nCheck if order was cancelled\nCheck if order was ever rejected\nBuilder for bracket order parameters\nBracket order parameters\nCover order parameters\nBuilder for order parameters\nOrder modification parameters\nOrder placement parameters\nAuction number\nBuild the bracket order parameters\nBuild the order parameters\nSet disclosed quantity\nDisclosed quantity for iceberg orders\nNew disclosed quantity\nSet exchange\nSet exchange\nExchange\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure for iceberg order\nICEBERG legs for iceberg orders\nICEBERG quantity for iceberg orders\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet market protection\nMarket protection percentage\nCreate a new bracket order builder\nCreate a new order builder\nOrder ID to modify\nBase order parameters\nBase order parameters\nSet order type\nOrder type\nNew order type\nParent order ID for bracket/cover orders\nSet price\nSet price (for limit orders)\nPrice (required for LIMIT orders)\nNew price\nSet product\nProduct type\nSet quantity\nSet quantity\nQuantity\nNew quantity\nSet square off value\nSquare off value for bracket orders\nSquare off value (mandatory for bracket orders)\nSet stoploss value\nStoploss value for bracket orders\nStoploss value (mandatory for bracket orders)\nSet tag\nTag for the order\nSet trading symbol\nSet trading symbol\nTrading symbol\nSet trailing stoploss\nTrailing stoploss value for bracket orders\nTrailing stoploss (optional)\nSet transaction type\nSet transaction type\nTransaction type (BUY/SELL)\nSet trigger price (for SL orders)\nTrigger price (required for SL and SL-M orders)\nTrigger price (mandatory for cover orders)\nNew trigger price\nSet validity\nValidity\nNew validity\nBulk conversion request for multiple instruments\nBulk conversion response\nPortfolio conversion request\nConversion response\nIndividual conversion result in bulk operation\nPortfolio conversion types\nConvert from MIS to CNC\nConvert from CNC to MIS\nAdd a conversion to the bulk request\nAdd multiple conversions to the bulk request\nCreate a request to convert CNC to MIS (position …\nGet the conversion type based on products\nList of conversion requests\nGet the total number of conversions\nError details if conversion failed\nGet the error message if conversion failed\nExchange\nExchange\nGet failed conversion results\nGet the number of failed conversions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom product type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if all conversions were successful\nCheck if the bulk request is empty\nCheck if the conversion failed\nCheck if this conversion failed\nCheck if the conversion was successful\nCheck if this conversion was successful\nCheck if this is a valid conversion\nMessage from the conversion operation\nOverall message\nMessage for this conversion\nCreate a request to convert MIS to CNC (holding conversion)\nCreate a request to convert MIS to NRML\nCreate a new conversion request\nCreate a new bulk conversion request\nCreate a request to convert NRML to MIS\nQuantity to convert\nIndividual conversion results\nStatus of the conversion\nStatus of the bulk conversion\nStatus of this specific conversion\nGet the number of successful conversions\nGet successful conversion results\nTo product type\nTrading symbol\nTrading symbol\nTransaction type\nValidate the conversion request\nValidate all conversions in the bulk request\nHoldings data structure\nHoldings summary\nPortfolio profile\nAccount ID\nAuthorised date\nAuthorized quantity (pledged/unpledged)\nGet available quantity for trading\nAverage price at which the stock was bought\nCheck if quantity can be sold today\nGet the change from previous day close\nGet the change percentage from previous day close\nClose price\nCollateral quantity\nCollateral type\nCollateral update quantity\nCommodity available\nCommodity used\nDay change\nDay change percentage\nDiscrepancy flag\nEquity available\nEquity used\nExchange\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate from a list of holdings\nCheck if the holding has any discrepancy\nNumber of holdings\nInstrument token\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate investment value (at average price)\nCheck if the holding is in loss\nCheck if the overall portfolio is in loss\nCheck if the holding is pledged\nCheck if the holding is profitable\nCheck if the overall portfolio is profitable\nISIN (International Securities Identification Number)\nLast price from exchange\nCalculate current market value of the holding\nOpening quantity at the start of the day\nP&amp;L (profit and loss)\nCalculate the P&amp;L percentage\nGet the overall P&amp;L percentage\nPrice change\nProduct type\nQuantity in the holding\nRealised quantity (can be sold immediately)\nGet quantity that can be sold today\nGet quantity that can be sold tomorrow (T+1)\nT1 quantity (can be sold after T+1 day)\nTotal day change\nTotal day change percentage\nTotal investment value (at average price)\nTotal P&amp;L across all holdings\nTotal holdings value at current market price\nTrading symbol\nGet unpledged quantity\nUsed quantity (used for pledging)\nUser ID\nDay positions (intraday)\nNet positions (overnight + intraday)\nPosition data structure\nPosition conversion request\nPosition type enumeration\nPositions summary\nGet the absolute quantity\nAccount ID\nAverage price at which the position was taken\nBuy M2M\nBuy price\nBuy quantity\nBuy value\nCalculate the change from close price\nCalculate the change percentage from close price\nClose price\nCreate a request to convert from CNC to MIS\nDay buy price\nDay buy quantity\nDay buy value\nGet the day P&amp;L\nDay sell price\nDay sell quantity\nDay sell value\nExchange\nExchange\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate from a list of positions\nCheck if there was day trading activity\nInstrument token\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is a day position (intraday)\nCheck if the position is flat (zero quantity)\nCheck if the position is long (positive quantity)\nCheck if the position is in loss\nCheck if the overall portfolio is in loss\nCheck if this is an overnight position\nCheck if the position is profitable\nCheck if the overall portfolio is profitable\nCheck if the position is short (negative quantity)\nLast price from exchange\nNumber of loss positions\nGet the loss rate (percentage of loss positions)\nM2M (Mark to Market) P&amp;L\nGet the current market value of the position\nCreate a request to convert from MIS to CNC\nMultiplier for the instrument\nGet net day quantity\nCreate a new position conversion request\nNew product type\nOld product type\nOvernight quantity\nP&amp;L (profit and loss)\nCalculate the P&amp;L percentage\nPosition type to convert from\nNumber of positions\nProduct type\nNumber of profitable positions\nNet quantity (positive for long, negative for short)\nQuantity to convert\nRealised P&amp;L\nSell M2M\nSell price\nSell quantity\nSell value\nTotal M2M across all positions\nTotal P&amp;L across all positions\nTotal realised P&amp;L\nTotal unrealised P&amp;L\nTrading symbol\nTrading symbol\nTransaction type\nUnrealised P&amp;L\nCurrent value of the position\nGet the win rate (percentage of profitable positions)")