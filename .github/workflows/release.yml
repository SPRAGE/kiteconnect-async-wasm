name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run tests
      run: cargo test --features native

    - name: Run doc tests
      run: cargo test --doc --features native

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Verify version matches tag
      run: |
        CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Cargo version: $CARGO_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch between Cargo.toml ($CARGO_VERSION) and tag ($TAG_VERSION)"
          exit 1
        fi
    
    - name: Dry run publish
      run: cargo publish --dry-run
    
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        if [ -z "$CARGO_REGISTRY_TOKEN" ]; then
          echo "Error: CARGO_REGISTRY_TOKEN secret is not set"
          echo "Please add your crates.io API token as a GitHub secret named 'CARGO_REGISTRY_TOKEN'"
          exit 1
        fi
        echo "Publishing to crates.io..."
        cargo publish --token "$CARGO_REGISTRY_TOKEN"

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract release notes
      id: extract-release-notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Try to extract release notes from CHANGELOG.md if it exists
        if [ -f CHANGELOG.md ]; then
          # Extract the section for this version
          awk -v version="$VERSION" '
            /^## \[/ { 
              if (found) exit
              if ($0 ~ version) found=1
              next
            }
            found && /^## \[/ { exit }
            found { print }
          ' CHANGELOG.md > release_notes.txt
          
          if [ -s release_notes.txt ]; then
            echo "Found release notes in CHANGELOG.md"
            cat release_notes.txt
          else
            echo "No release notes found for version $VERSION in CHANGELOG.md"
            echo "Release version $VERSION" > release_notes.txt
          fi
        else
          echo "Release version $VERSION" > release_notes.txt
        fi
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.extract-release-notes.outputs.version }}
        body_path: release_notes.txt
        draft: false
        prerelease: false
